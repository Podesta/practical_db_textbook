.. _appendix-a:

==============================================
Appendix A: Example datasets used in this book
==============================================

.. contents:: Quick links
   :local:
   :depth: 2
   :backlinks: none

Getting the data
::::::::::::::::

:numref:`Part {number} <sql-part>` of this book includes interactive elements allowing the reader to work directly with a relational database.  This functionality lets students immediately try example code on a real database system.  As the database available on each page is actually a copy (in memory) of a fixed database, changes to the database do not persist over time - refreshing the browser window will return the database to the same initial state each time.  This is useful in that students can safely experiment with destructive SQL commands, knowing that no changes are permanent.  On the other hand, it means that students cannot use the system for longer-term projects.

The database system used in this textbook is `SQLite`_.  While SQLite is a powerful and popular relational database system, it lacks some features of the client-server database systems commonly used in industry.  It also differs in significant ways from the SQL standard (particularly with its use of dynamic typing).

.. _`SQLite`: https://www.sqlite.org/

For these reasons, users of this textbook may wish to set up their own database system.  There exist many different database systems, each with their own system requirements and installation procedures.  There are likewise many ways to access and query each database system.  Instructions for setting up and accessing different systems are therefore out of the scope of this textbook.  However, in the interest of providing a transition from the textbook's database to the users' systems of choice, we provide scripts and data files below, which can be used to re-create the book's database on selected database systems.

SQLite
------

The `SQLite`_ database engine is unique (in the set of systems supported by this textbook) in that it works with databases stored entirely in a single file.  SQLite databases can be shared by simply copying the files containing them.  We provide below the database file used by this textbook.  Additionally, we provide a SQL script (a text file in UTF-8 Unicode format) with the SQL commands necessary to re-create the database from scratch.  Use the former if you simply want a copy of the textbook's database for your own use; use the latter if you want to create the textbook's database tables within an existing SQLite database.  The SQL script contains only **CREATE TABLE** and **INSERT** statements, and therefore should not replace existing tables within the database.

- :download:`textbook.sqlite3`, the textbook's SQLite database file
- :download:`sqlite.sql`, the SQL script

This SQL script was verified to work correctly using version 3.39.2 of the ``sqlite3.exe`` program on Windows 10 and with version 3.31.1 of the ``sqlite3`` program running on linux (Linux Mint 20.3 with kernel version 5.15.0-41).

PostgreSQL
----------

The SQL script below can be used to create the equivalent of the textbook's tables in a `PostgreSQL`_ database.  The SQL script contains only **CREATE TABLE** and **INSERT** statements, and therefore should not replace existing tables within the database.

.. _`PostgreSQL`: https://www.postgresql.org/

- :download:`postgresql.sql`

This SQL script was verified to work correctly using version 12.5 of the ``psql.exe`` program on Windows 10 and with version 12.11 of the ``psql`` program running on linux (Linux Mint 20.3 with kernel version 5.15.0-41), loading into a PostgreSQL version 12.8 server running on linux (Linux Mint 20 with kernel version 5.4.0-86).

Note: on Windows 10, running psql under Command Prompt or Powershell, the data can be loaded correctly only if you first issue the command ``\encoding utf8`` (at the ``psql`` command line); however, even with this setting, some text in query results may not display correctly (at least on the English-language version of Windows).  To see characters printed correctly, before running ``psql.exe``, try issuing the command ``chcp 65001`` (some characters may still not print correctly).

Notable differences from the textbook:

- As described in the text, SQLite does not use a standard SQL approach to automatically generate sequential ID values.  The **AUTOINCREMENT** option used in the SQLite database (in **bookstore_sales** and **bookstore_inventory**) is not available in PostgreSQL, but the standard SQL **GENERATED BY DEFAULT AS IDENTITY** option is.  Accordingly, the PostgreSQL script uses the standard approach.  The two options behave slightly differently.

MySQL
-----

The SQL script below can be used to create the equivalent of the textbook's tables in a `MySQL`_ database.  The SQL script contains only **CREATE TABLE** and **INSERT** statements, and therefore should not replace existing tables within the database.

.. _`MySQL`: https://www.mysql.com/

- :download:`mysql.sql`

This SQL script was verified to work correctly using version 8.0.29 of the MySQL Shell (``mysqlsh.exe``) program on Windows 10 and with version 8.0.29 of the ``mysql`` program running on linux (Linux Mint 20.3 with kernel version 5.15.0-41), loading into a MySQL version 8.0.26 server running on linux (Linux Mint 20 with kernel version 5.4.0-86).

Notable differences from the textbook:

- The **bookstore_sales** table in the textbook database has a **DEFAULT** clause to set the **date_sold** column to the current date when no value is provided for the column.  MySQL does not permit default setting for columns of type **DATE**, but does allow it for the **TIMESTAMP** type.  Accordingly, the **date_sold** column in the MySQL script is of type **TIMESTAMP** (and thus includes time as well as date).
- The MySQL **AUTO_INCREMENT** option is very similar to the **AUTOINCREMENT** option in SQLite (used in **bookstore_sales** and **bookstore_inventory**), but may have slightly different behavior.
- The **bookstore_inventory** table contains a column named **condition**.  This is a reserved keyword in MySQL, which means that queries such as "SELECT DISTINCT condition FROM bookstore_inventory" will fail unless you put backticks around the word "condition".  (The backtick character looks like an apostrophe, but slanting in the opposite direction.)

Oracle
------

The SQL script below can be used to create the equivalent of the textbook's tables in an Oracle database.  The SQL script contains only **CREATE TABLE** and **INSERT** statements and statements setting temporary session variables, and therefore should not replace existing tables within the database.

- :download:`oracle.sql`

This SQL script was verified to work correctly using Oracle's SQLcl utility (release 22.2) running on linux (Linux Mint 20.3 with kernel version 5.15.0-41) with OpenJDK version 11.0.15, loading into an Oracle Database XE 18c instance running on linux (openSUSE Leap 15.2 with kernel version 5.3.18).  On Windows 10, the script will run without errors in SQLcl, but some Unicode character values may be corrupted.  Note: if you run this script with SQLcl or SQL\*Plus, you *must* uncomment the command ``SET DEFINE OFF`` at the top of the script.  Otherwise, the program will interpret any \& characters to imply a variable substitution sequence, which will halt the script and prevent the data from loading correctly.

Notable differences from the textbook:

- As described in the text, SQLite does not use a standard SQL approach to automatically generate sequential ID values.  The **AUTOINCREMENT** option used in the SQLite database (in **bookstore_sales** and **bookstore_inventory**) is not available in Oracle, but the standard SQL **GENERATED BY DEFAULT AS IDENTITY** option is.  Accordingly, the Oracle script uses the standard approach.  The two options behave slightly differently.

Raw data files
--------------

The books dataset
:::::::::::::::::

asdfasd

The bookstore dataset
:::::::::::::::::::::

asdfasdfasd

Other tables in the database
::::::::::::::::::::::::::::

adsfasdfdsa

Data collection notes
:::::::::::::::::::::

asdfsad

..
  Below are interactive SQL interfaces for all of the various databases used in this book, organized by chapter.  Remember that you query the **sqlite_master** table to see the specifications of objects in a given database, e.g.:

  ::

      SELECT sql FROM sqlite_master WHERE type = 'table';

  to see the specifications of the tables in a given database.

  Chapter 2: Basic SELECT queries
  :::::::::::::::::::::::::::::::

  Books and authors database
  --------------------------

  This database is the simplest form of the books database, containing a **books** table and an **authors** table.

  .. activecode:: appendix_a_ch2_books
      :language: sql
      :dburl: /_static/simple_books.sqlite3

      SELECT * FROM books;

  Fruit stand database
  --------------------

  Though an interactive block for this database was not included in chapter 2, this database contains the **fruit_stand** table shown.

  .. activecode:: appendix_a_ch2_fruit_stand
      :language: sql
      :dburl: /_static/fruit_stand.sqlite3

      SELECT * FROM fruit_stand;

  The expanded books database
  :::::::::::::::::::::::::::

  We are now ready to describe the database we will be using for the rest of this book.  The new database is still centered around **book** and **authors** tables, modified to use id columns as described above, but also adds several other tables.  All of the tables and their basic relationships to each other are described below, after which we will discuss some basic join queries using the tables.  The descriptions below are also repeated in `Appendix A`_ for future reference.

  .. container:: data-dictionary

      Table **authors** records persons who have authored books:

      ========== ================= ===================================
      column     type              description
      ========== ================= ===================================
      author_id  integer           unique identifier for author
      name       character string  full name of author
      birth      date              birth date of author, if known
      death      date              death date of author, if known
      ========== ================= ===================================

  .. container:: data-dictionary

      Table **books** records works of fiction, non-fiction, poetry, etc. by a single author:

      ================ ================= ===================================
      column           type              description
      ================ ================= ===================================
      book_id          integer           unique identifier for book
      author_id        integer           author_id of book's author from **authors** table
      title            character string  book title
      publication_year integer           year book was first published
      ================ ================= ===================================


  .. container:: data-dictionary

      Table **editions** records specific publications of a book:

      ================== ================= ===================================
      column             type              description
      ================== ================= ===================================
      edition_id         integer           unique identifier for edition
      book_id            integer           book_id of book (from **books** table) published as edition
      publication_year   integer           year this edition was published
      publisher          character string  name of the publisher
      publisher_location character string  city or other location(s) where the publisher is located
      title              character string  title this edition was published under
      pages              integer           number of pages in this edition
      isbn10             character string  10-digit international standard book number
      isbn13             character string  13-digit international standard book number
      ================== ================= ===================================


  .. container:: data-dictionary

      Table **awards** records various author and/or book awards:

      ================== ================= ===================================
      column             type              description
      ================== ================= ===================================
      award_id           integer           unique identifier for award
      name               character string  name of award
      sponsor            character string  name of organization giving the award
      criteria           character string  what the award is given for
      ================== ================= ===================================


  .. container:: data-dictionary

      Table **authors_awards** is a *cross-reference* table (explained below) relating **authors** and **awards**; each entry in the table records the giving of an award to an author (not for any particular book) in a particular year:

      ================== ================= ===================================
      column             type              description
      ================== ================= ===================================
      author_id          integer           author_id of the author receiving the award
      award_id           integer           award_id of the award received
      year               integer           year the award was given
      ================== ================= ===================================


  .. container:: data-dictionary

      Table **books_awards** is a *cross-reference* table (explained below) relating **books** and **awards**; each entry in the table records the giving of an award to an author for a specific book in a particular year:

      ================== ================= ===================================
      column             type              description
      ================== ================= ===================================
      book_id            integer           book_id of the book for which the award was given
      award_id           integer           award_id of the award given
      year               integer           year the award was given
      ================== ================= ===================================


  Data models
  :::::::::::

  ERD and other notations


----

|license-notice|
